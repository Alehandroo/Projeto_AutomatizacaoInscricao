import os
import pickle
from google.auth.transport.requests import Request
from google.oauth2 import service_account
from googleapiclient.discovery import build
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient.discovery import build

# Defina o caminho para o arquivo de credenciais do serviço
credentials_path = 'C:\\Users\\JOHNNYPENI\\Desktop\\Estagio\\Projeto_AutomatizacaoInscricao\\projectoauto-ae51294fd899.json'

# Defina o escopo necessário para a API Admin SDK
scopes = ['https://www.googleapis.com/auth/admin.directory.group']


def get_credentials():
    credentials = None

    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token_file:
            try:
                credentials = pickle.load(token_file)
            except EOFError:
                pass

    if not credentials or not credentials.valid:
        credentials = service_account.Credentials.from_service_account_file(
            credentials_path, scopes=scopes)
        credentials.refresh(Request())
        with open('token.pickle', 'wb') as token_file:
            pickle.dump(credentials, token_file)

    service_account_file = 'C:\\Users\\JOHNNYPENI\\Desktop\\Estagio\\Projeto_AutomatizacaoInscricao\\projectoauto-ae51294fd899.json'
    sub_email = 'admin@alpoente.org'

    credentials = service_account.Credentials.from_service_account_file(
        service_account_file, scopes=scopes
    )
    credentials = credentials.with_subject(sub_email)
    if credentials.expired and credentials.refresh_token:
        credentials.refresh(Request())

    return credentials


def adicionar(group_key, member_email):
    credentials = get_credentials()
    service = build('admin', 'directory_v1', credentials=credentials)

    try:
        member = {
            'email': member_email,
            'role': 'MEMBER'
        }

        service.members().insert(groupKey=group_key, body=member).execute()
        print(f'O membro {member_email} foi adicionado à lista {group_key} com sucesso!')
    except Exception as e:
        print(f'Ocorreu um erro ao adicionar o membro {member_email}: {str(e)}')


def retirar(group_key, member_email):
    credentials = get_credentials()
    service = build('admin', 'directory_v1', credentials=credentials)

    try:
        # Remove the member from the mailing list
        service.members().delete(groupKey=group_key, memberKey=member_email).execute()
        print(f'Successfully removed {member_email} from {group_key}.')
    except Exception as e:
        print(f'Error removing {member_email} from {group_key}: {str(e)}')

def alterar(group_key, member_email):
    print("Alterar")


scope = ['https://www.googleapis.com/auth/spreadsheets']
creds = ServiceAccountCredentials.from_json_keyfile_name('C:\\Users\\JOHNNYPENI\\Desktop\\Estagio\\Projeto_AutomatizacaoInscricao\\projectoauto-ae51294fd899.json', scope)
client = gspread.authorize(creds)

sheet = client.open_by_key('1mEwN7mD1gxVVuiV8CdFOUYlsxlTPJrUCUqb4VbQgwGQ')
worksheet = sheet.worksheet('AutoDB')


for i in range(2, worksheet.row_count + 1):
    linha = worksheet.row_values(i)
    if all(value == '' for value in linha):
        break
    acao,nProcesso,nome,ano,turma = linha[1:6]
    new_user = {
        "acao": acao,
        "nome": nome,
        "password": 123,
        "primaryEmail": "a" + str(nProcesso) + "@alpoente.org",
        "list":  str(ano) + str(turma) + "@alpoente.org",
        "changePasswordAtNextLogin": True,
    }

    group_key = 'testeteste@alpoente.org'  # Substitua pelo endereço da sua lista de discussão
    member_email = new_user['primaryEmail']  # Substitua pelo endereço do novo membro

    print(new_user)
    match new_user["acao"]:
        case "Adicionar":
            adicionar(group_key,member_email)
        case "Retirar":
            retirar(group_key,member_email)
        case "Alterar":
            alterar(group_key,member_email)
        case Default:
            print("Operação inválida")
            